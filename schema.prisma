// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Article {
  id              String             @id @default(cuid())
  title           String             @default("")
  slug            String             @default("")
  articleType     Structure?         @relation("Article_articleType", fields: [articleTypeId], references: [id])
  articleTypeId   String?            @map("articleType")
  content         Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          ArticleStatusType?
  featuredImage   Asset?             @relation("Article_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?            @map("featuredImage")
  media           Asset[]            @relation("Article_media")
  author          User?              @relation("Article_author", fields: [authorId], references: [id])
  authorId        String?            @map("author")
  tags            Tag[]              @relation("Article_tags")
  seoTitle        String             @default("")
  seoDescription  String             @default("")
  seoImage        Asset?             @relation("Article_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?            @map("seoImage")
  dateCreated     DateTime?          @default(now())
  dateUpdated     DateTime?          @default(now()) @updatedAt

  @@index([articleTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([seoImageId])
}

model Animal {
  id              String            @id @default(cuid())
  name            String            @default("")
  slug            String            @default("")
  animalType      Structure?        @relation("Animal_animalType", fields: [animalTypeId], references: [id])
  animalTypeId    String?           @map("animalType")
  scientificName  String            @default("")
  content         Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          AnimalStatusType?
  featuredImage   Asset?            @relation("Animal_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?           @map("featuredImage")
  media           Asset[]           @relation("Animal_media")
  author          User?             @relation("Animal_author", fields: [authorId], references: [id])
  authorId        String?           @map("author")
  tags            Tag?              @relation("Animal_tags", fields: [tagsId], references: [id])
  tagsId          String?           @map("tags")
  seoTitle        String            @default("")
  seoDescription  String            @default("")
  seoImage        Asset?            @relation("Animal_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?           @map("seoImage")
  dateCreated     DateTime?         @default(now())
  dateUpdated     DateTime?         @default(now()) @updatedAt

  @@index([animalTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([tagsId])
  @@index([seoImageId])
}

model Event {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  eventType       Structure?       @relation("Event_eventType", fields: [eventTypeId], references: [id])
  eventTypeId     String?          @map("eventType")
  content         Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  location        Json?
  startDate       DateTime?
  endDate         DateTime?
  vendors         Organization[]   @relation("Event_vendors")
  featuredImage   Asset?           @relation("Event_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset?           @relation("Event_media", fields: [mediaId], references: [id])
  mediaId         String?          @map("media")
  author          User?            @relation("Event_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  status          EventStatusType?
  tags            Tag[]            @relation("Event_tags")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Event_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt

  @@index([eventTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Page {
  id             String          @id @default(cuid())
  title          String          @default("")
  slug           String          @default("")
  pageType       Structure?      @relation("Page_pageType", fields: [pageTypeId], references: [id])
  pageTypeId     String?         @map("pageType")
  content        Json            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status         PageStatusType?
  author         User?           @relation("Page_author", fields: [authorId], references: [id])
  authorId       String?         @map("author")
  tags           Tag[]           @relation("Page_tags")
  seoTitle       String          @default("")
  seoDescription String          @default("")
  seoImage       Asset?          @relation("Page_seoImage", fields: [seoImageId], references: [id])
  seoImageId     String?         @map("seoImage")
  dateCreated    DateTime?       @default(now())
  dateUpdated    DateTime?       @default(now()) @updatedAt

  @@index([pageTypeId])
  @@index([authorId])
  @@index([seoImageId])
}

model Trait {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  animalType      Structure?       @relation("Trait_animalType", fields: [animalTypeId], references: [id])
  animalTypeId    String?          @map("animalType")
  content         Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status          TraitStatusType?
  featuredImage   Asset?           @relation("Trait_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset[]          @relation("Trait_media")
  author          User?            @relation("Trait_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  tags            Tag[]            @relation("Tag_traits")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Trait_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt

  @@index([animalTypeId])
  @@index([featuredImageId])
  @@index([authorId])
  @@index([seoImageId])
}

model Group {
  id              String           @id @default(cuid())
  name            String           @default("")
  handle          String           @default("")
  description     Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  members         User[]           @relation("Group_members")
  moderators      User[]           @relation("Group_moderators")
  status          GroupStatusType?
  featuredImage   Asset?           @relation("Group_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset[]          @relation("Group_media")
  author          User?            @relation("Group_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  tags            Tag[]            @relation("Group_tags")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Group_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  from_Post_group Post[]           @relation("Post_group")

  @@index([featuredImageId])
  @@index([authorId])
  @@index([seoImageId])
}

model Post {
  id               String          @id @default(cuid())
  streamActivityId String          @default("")
  group            Group?          @relation("Post_group", fields: [groupId], references: [id])
  groupId          String?         @map("group")
  status           PostStatusType?
  author           User?           @relation("Post_author", fields: [authorId], references: [id])
  authorId         String?         @map("author")
  tags             Tag[]           @relation("Post_tags")
  seoTitle         String          @default("")
  seoDescription   String          @default("")
  seoImage         Asset?          @relation("Post_seoImage", fields: [seoImageId], references: [id])
  seoImageId       String?         @map("seoImage")
  dateCreated      DateTime?       @default(now())
  dateUpdated      DateTime?       @default(now()) @updatedAt

  @@index([groupId])
  @@index([authorId])
  @@index([seoImageId])
}

model Customer {
  id               String              @id @default(cuid())
  user             User[]              @relation("User_customer")
  customerType     Structure?          @relation("Customer_customerType", fields: [customerTypeId], references: [id])
  customerTypeId   String?             @map("customerType")
  stripeCustomerId String              @default("")
  subscription     Subscription?       @relation("Customer_subscription", fields: [subscriptionId], references: [id])
  subscriptionId   String?             @map("subscription")
  status           CustomerStatusType?
  dateCreated      DateTime?           @default(now())
  dateUpdated      DateTime?           @default(now()) @updatedAt

  @@index([customerTypeId])
  @@index([subscriptionId])
}

model Listing {
  id              String             @id @default(cuid())
  title           String             @default("")
  slug            String             @default("")
  listingType     Structure?         @relation("Listing_listingType", fields: [listingTypeId], references: [id])
  listingTypeId   String?            @map("listingType")
  price           String             @default("")
  description     Json               @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  store           Store?             @relation("Listing_store", fields: [storeId], references: [id])
  storeId         String?            @unique @map("store")
  stripeProductId String             @default("")
  status          ListingStatusType?
  featuredImage   Asset?             @relation("Listing_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?            @map("featuredImage")
  media           Asset?             @relation("Listing_media", fields: [mediaId], references: [id])
  mediaId         String?            @map("media")
  author          User?              @relation("Listing_author", fields: [authorId], references: [id])
  authorId        String?            @map("author")
  tags            Tag[]              @relation("Listing_tags")
  seoTitle        String             @default("")
  seoDescription  String             @default("")
  seoImage        Asset?             @relation("Listing_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?            @map("seoImage")
  dateCreated     DateTime?          @default(now())
  dateUpdated     DateTime?          @default(now()) @updatedAt

  @@index([listingTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Store {
  id              String           @id @default(cuid())
  name            String           @default("")
  slug            String           @default("")
  storeType       Structure?       @relation("Store_storeType", fields: [storeTypeId], references: [id])
  storeTypeId     String?          @map("storeType")
  description     Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  listings        Listing?         @relation("Listing_store")
  location        Json?
  stripeStoreId   String           @default("")
  status          StoreStatusType?
  featuredImage   Asset?           @relation("Store_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId String?          @map("featuredImage")
  media           Asset?           @relation("Store_media", fields: [mediaId], references: [id])
  mediaId         String?          @map("media")
  author          User?            @relation("Store_author", fields: [authorId], references: [id])
  authorId        String?          @map("author")
  tags            Tag[]            @relation("Store_tags")
  seoTitle        String           @default("")
  seoDescription  String           @default("")
  seoImage        Asset?           @relation("Store_seoImage", fields: [seoImageId], references: [id])
  seoImageId      String?          @map("seoImage")
  organization    Organization[]   @relation("Organization_stores")
  dateCreated     DateTime?        @default(now())
  dateUpdated     DateTime?        @default(now()) @updatedAt

  @@index([storeTypeId])
  @@index([featuredImageId])
  @@index([mediaId])
  @@index([authorId])
  @@index([seoImageId])
}

model Category {
  id          String    @id @default(cuid())
  title       String    @default("")
  handle      String    @default("")
  dateCreated DateTime? @default(now())
  dateUpdated DateTime? @default(now()) @updatedAt
}

model Collection {
  id          String                @id @default(cuid())
  title       String                @default("")
  handle      String                @default("")
  author      User?                 @relation("Collection_author", fields: [authorId], references: [id])
  authorId    String?               @map("author")
  status      CollectionStatusType?
  tags        Tag[]                 @relation("Collection_tags")
  dateCreated DateTime?             @default(now())
  dateUpdated DateTime?             @default(now()) @updatedAt

  @@index([authorId])
}

model Structure {
  id                                 String         @id @default(cuid())
  name                               String         @default("")
  handle                             String         @default("")
  structure                          Json?
  dateCreated                        DateTime?      @default(now())
  dateUpdated                        DateTime?      @default(now()) @updatedAt
  from_Article_articleType           Article[]      @relation("Article_articleType")
  from_Animal_animalType             Animal[]       @relation("Animal_animalType")
  from_Event_eventType               Event[]        @relation("Event_eventType")
  from_Page_pageType                 Page[]         @relation("Page_pageType")
  from_Trait_animalType              Trait[]        @relation("Trait_animalType")
  from_Customer_customerType         Customer[]     @relation("Customer_customerType")
  from_Listing_listingType           Listing[]      @relation("Listing_listingType")
  from_Store_storeType               Store[]        @relation("Store_storeType")
  from_Tag_tagType                   Tag[]          @relation("Tag_tagType")
  from_Organization_organizationType Organization[] @relation("Organization_organizationType")
  from_Subscription_subscriptionType Subscription[] @relation("Subscription_subscriptionType")
}

model Tag {
  id                   String        @id @default(cuid())
  title                String        @default("")
  handle               String        @default("")
  tagType              Structure?    @relation("Tag_tagType", fields: [tagTypeId], references: [id])
  tagTypeId            String?       @map("tagType")
  listings             Listing[]     @relation("Listing_tags")
  stores               Store[]       @relation("Store_tags")
  animals              Animal[]      @relation("Animal_tags")
  articles             Article[]     @relation("Article_tags")
  events               Event[]       @relation("Event_tags")
  pages                Page[]        @relation("Page_tags")
  traits               Trait[]       @relation("Tag_traits")
  groups               Group[]       @relation("Group_tags")
  organizations        Organization? @relation("Tag_organizations", fields: [organizationsId], references: [id])
  organizationsId      String?       @map("organizations")
  dateCreated          DateTime?     @default(now())
  dateUpdated          DateTime?     @default(now()) @updatedAt
  from_Post_tags       Post[]        @relation("Post_tags")
  from_Collection_tags Collection[]  @relation("Collection_tags")
  from_Asset_tags      Asset[]       @relation("Asset_tags")

  @@index([tagTypeId])
  @@index([organizationsId])
}

model Asset {
  id                              String           @id @default(cuid())
  file_filesize                   Int?
  file_mode                       String?
  file_filename                   String?
  folder                          AssetFolderType?
  altTitle                        String           @default("")
  caption                         String           @default("")
  status                          AssetStatusType?
  author                          User?            @relation("Asset_author", fields: [authorId], references: [id])
  authorId                        String?          @unique @map("author")
  tags                            Tag[]            @relation("Asset_tags")
  dateCreated                     DateTime?        @default(now())
  dateUpdated                     DateTime?        @default(now()) @updatedAt
  from_Article_featuredImage      Article[]        @relation("Article_featuredImage")
  from_Article_media              Article[]        @relation("Article_media")
  from_Article_seoImage           Article[]        @relation("Article_seoImage")
  from_Animal_featuredImage       Animal[]         @relation("Animal_featuredImage")
  from_Animal_media               Animal[]         @relation("Animal_media")
  from_Animal_seoImage            Animal[]         @relation("Animal_seoImage")
  from_Event_featuredImage        Event[]          @relation("Event_featuredImage")
  from_Event_media                Event[]          @relation("Event_media")
  from_Event_seoImage             Event[]          @relation("Event_seoImage")
  from_Page_seoImage              Page[]           @relation("Page_seoImage")
  from_Trait_featuredImage        Trait[]          @relation("Trait_featuredImage")
  from_Trait_media                Trait[]          @relation("Trait_media")
  from_Trait_seoImage             Trait[]          @relation("Trait_seoImage")
  from_Group_featuredImage        Group[]          @relation("Group_featuredImage")
  from_Group_media                Group[]          @relation("Group_media")
  from_Group_seoImage             Group[]          @relation("Group_seoImage")
  from_Post_seoImage              Post[]           @relation("Post_seoImage")
  from_Listing_featuredImage      Listing[]        @relation("Listing_featuredImage")
  from_Listing_media              Listing[]        @relation("Listing_media")
  from_Listing_seoImage           Listing[]        @relation("Listing_seoImage")
  from_Store_featuredImage        Store[]          @relation("Store_featuredImage")
  from_Store_media                Store[]          @relation("Store_media")
  from_Store_seoImage             Store[]          @relation("Store_seoImage")
  from_User_avatar                User[]           @relation("User_avatar")
  from_Organization_featuredImage Organization[]   @relation("Organization_featuredImage")
  from_Organization_media         Organization[]   @relation("Organization_media")
  from_Organization_seoImage      Organization[]   @relation("Organization_seoImage")
  from_Subscription_featuredImage Subscription[]   @relation("Subscription_featuredImage")
  from_Subscription_media         Subscription[]   @relation("Subscription_media")
  from_Subscription_seoImage      Subscription[]   @relation("Subscription_seoImage")
}

model User {
  id                       String          @id @default(cuid())
  name                     String          @default("")
  email                    String          @unique @default("")
  firstName                String          @default("")
  lastName                 String          @default("")
  password                 String?
  about                    Json            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  avatar                   Asset?          @relation("User_avatar", fields: [avatarId], references: [id])
  avatarId                 String?         @map("avatar")
  role                     Role?           @relation("User_role", fields: [roleId], references: [id])
  roleId                   String?         @map("role")
  following                User[]          @relation("User_followers")
  followers                User[]          @relation("User_followers")
  listings                 Listing[]       @relation("Listing_author")
  animals                  Animal[]        @relation("Animal_author")
  articles                 Article[]       @relation("Article_author")
  events                   Event[]         @relation("Event_author")
  pages                    Page[]          @relation("Page_author")
  customer                 Customer?       @relation("User_customer", fields: [customerId], references: [id])
  customerId               String?         @map("customer")
  store                    Store[]         @relation("Store_author")
  groupMember              Group[]         @relation("Group_members")
  moderator                Group[]         @relation("Group_moderators")
  groupAuthor              Group[]         @relation("Group_author")
  organizationMembers      Organization?   @relation("User_organizationMembers", fields: [organizationMembersId], references: [id])
  organizationMembersId    String?         @map("organizationMembers")
  organization             Organization?   @relation("Organization_author")
  assets                   Asset?          @relation("Asset_author")
  traits                   Trait[]         @relation("Trait_author")
  status                   UserStatusType?
  metadata                 Json?
  dateCreated              DateTime?       @default(now())
  dateUpdated              DateTime?       @default(now()) @updatedAt
  passwordResetToken       String?
  passwordResetIssuedAt    DateTime?
  passwordResetRedeemedAt  DateTime?
  from_Post_author         Post[]          @relation("Post_author")
  from_Collection_author   Collection[]    @relation("Collection_author")
  from_Global_author       Global[]        @relation("Global_author")
  from_Subscription_author Subscription[]  @relation("Subscription_author")
  from_Setting_author      Setting[]       @relation("Setting_author")

  @@index([avatarId])
  @@index([roleId])
  @@index([customerId])
  @@index([organizationMembersId])
}

model Role {
  id               String    @id @default(cuid())
  name             String    @default("")
  handle           String    @default("")
  description      String    @default("")
  permissions      Boolean   @default(false)
  dateCreated      DateTime? @default(now())
  dateUpdated      DateTime? @default(now()) @updatedAt
  canSeeOtherUsers Boolean   @default(false)
  canManageUsers   Boolean   @default(false)
  canManageRoles   Boolean   @default(false)
  canReadListing   Boolean   @default(false)
  canManageListing Boolean   @default(false)
  canManageAnimal  Boolean   @default(false)
  canManageArticle Boolean   @default(false)
  canManageEvent   Boolean   @default(false)
  canManagePage    Boolean   @default(false)
  canManageTrait   Boolean   @default(false)
  assignedTo       User[]    @relation("User_role")
}

model Organization {
  id                 String                  @id @default(cuid())
  name               String                  @default("")
  slug               String                  @default("")
  organizationType   Structure?              @relation("Organization_organizationType", fields: [organizationTypeId], references: [id])
  organizationTypeId String?                 @map("organizationType")
  description        Json                    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  stores             Store[]                 @relation("Organization_stores")
  members            User[]                  @relation("User_organizationMembers")
  status             OrganizationStatusType?
  featuredImage      Asset?                  @relation("Organization_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId    String?                 @map("featuredImage")
  media              Asset[]                 @relation("Organization_media")
  author             User?                   @relation("Organization_author", fields: [authorId], references: [id])
  authorId           String?                 @unique @map("author")
  tags               Tag[]                   @relation("Tag_organizations")
  seoTitle           String                  @default("")
  seoDescription     String                  @default("")
  seoImage           Asset?                  @relation("Organization_seoImage", fields: [seoImageId], references: [id])
  seoImageId         String?                 @map("seoImage")
  vendors            Event[]                 @relation("Event_vendors")
  dateCreated        DateTime?               @default(now())
  dateUpdated        DateTime?               @default(now()) @updatedAt

  @@index([organizationTypeId])
  @@index([featuredImageId])
  @@index([seoImageId])
}

model Global {
  id          String            @id @default(cuid())
  name        String            @default("")
  handle      String            @default("")
  data        Json?
  author      User?             @relation("Global_author", fields: [authorId], references: [id])
  authorId    String?           @map("author")
  status      GlobalStatusType?
  dateCreated DateTime?         @default(now())
  dateUpdated DateTime?         @default(now()) @updatedAt

  @@index([authorId])
}

model Subscription {
  id                   String                  @id @default(cuid())
  name                 String                  @default("")
  handle               String                  @default("")
  subscriptionType     Structure?              @relation("Subscription_subscriptionType", fields: [subscriptionTypeId], references: [id])
  subscriptionTypeId   String?                 @map("subscriptionType")
  description          Json                    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  stripeSubscriptionId String                  @default("")
  status               SubscriptionStatusType?
  featuredImage        Asset?                  @relation("Subscription_featuredImage", fields: [featuredImageId], references: [id])
  featuredImageId      String?                 @map("featuredImage")
  media                Asset[]                 @relation("Subscription_media")
  author               User?                   @relation("Subscription_author", fields: [authorId], references: [id])
  authorId             String?                 @map("author")
  seoTitle             String                  @default("")
  seoDescription       String                  @default("")
  seoImage             Asset[]                 @relation("Subscription_seoImage")
  customer             Customer[]              @relation("Customer_subscription")
  dateCreated          DateTime?               @default(now())
  dateUpdated          DateTime?               @default(now()) @updatedAt

  @@index([subscriptionTypeId])
  @@index([featuredImageId])
  @@index([authorId])
}

model Setting {
  id          String             @id @default(cuid())
  name        String             @default("")
  handle      String             @default("")
  data        Json?
  author      User?              @relation("Setting_author", fields: [authorId], references: [id])
  authorId    String?            @map("author")
  status      SettingStatusType?
  dateCreated DateTime?          @default(now())
  dateUpdated DateTime?          @default(now()) @updatedAt

  @@index([authorId])
}

enum ArticleStatusType {
  active
  inactive
}

enum AnimalStatusType {
  active
  inactive
}

enum EventStatusType {
  active
  inactive
}

enum PageStatusType {
  active
  inactive
}

enum TraitStatusType {
  active
  inactive
}

enum GroupStatusType {
  active
  inactive
}

enum PostStatusType {
  active
  inactive
}

enum CustomerStatusType {
  active
  inactive
}

enum ListingStatusType {
  active
  inactive
}

enum StoreStatusType {
  active
  inactive
}

enum CollectionStatusType {
  active
  inactive
}

enum AssetFolderType {
  active
  inactive
}

enum AssetStatusType {
  active
  inactive
}

enum UserStatusType {
  active
  inactive
}

enum OrganizationStatusType {
  active
  inactive
}

enum GlobalStatusType {
  active
  inactive
}

enum SubscriptionStatusType {
  active
  inactive
}

enum SettingStatusType {
  active
  inactive
}