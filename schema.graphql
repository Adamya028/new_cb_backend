# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Article {
  id: ID!
  title: String
  slug: String
  articleType: Structure
  content: Article_content_Document
  status: ArticleStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Article_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ArticleStatusType {
  active
  inactive
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  articleType: StructureWhereInput
  status: ArticleStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ArticleStatusTypeNullableFilter {
  equals: ArticleStatusType
  in: [ArticleStatusType!]
  notIn: [ArticleStatusType!]
  not: ArticleStatusTypeNullableFilter
}

input AssetManyRelationFilter {
  every: AssetWhereInput
  some: AssetWhereInput
  none: AssetWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ArticleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ArticleUpdateInput {
  title: String
  slug: String
  articleType: StructureRelateToOneForUpdateInput
  content: JSON
  status: ArticleStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureRelateToOneForUpdateInput {
  create: StructureCreateInput
  connect: StructureWhereUniqueInput
  disconnect: Boolean
}

input AssetRelateToOneForUpdateInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
}

input AssetRelateToManyForUpdateInput {
  disconnect: [AssetWhereUniqueInput!]
  set: [AssetWhereUniqueInput!]
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  title: String
  slug: String
  articleType: StructureRelateToOneForCreateInput
  content: JSON
  status: ArticleStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureRelateToOneForCreateInput {
  create: StructureCreateInput
  connect: StructureWhereUniqueInput
}

input AssetRelateToOneForCreateInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
}

input AssetRelateToManyForCreateInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Animal {
  id: ID!
  name: String
  slug: String
  animalType: Structure
  scientificName: String
  content: Animal_content_Document
  status: AnimalStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags: Tag
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Animal_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum AnimalStatusType {
  active
  inactive
}

input AnimalWhereUniqueInput {
  id: ID
}

input AnimalWhereInput {
  AND: [AnimalWhereInput!]
  OR: [AnimalWhereInput!]
  NOT: [AnimalWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  animalType: StructureWhereInput
  scientificName: StringFilter
  status: AnimalStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagWhereInput
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input AnimalStatusTypeNullableFilter {
  equals: AnimalStatusType
  in: [AnimalStatusType!]
  notIn: [AnimalStatusType!]
  not: AnimalStatusTypeNullableFilter
}

input AnimalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  scientificName: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input AnimalUpdateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForUpdateInput
  scientificName: String
  content: JSON
  status: AnimalStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToOneForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input AnimalUpdateArgs {
  where: AnimalWhereUniqueInput!
  data: AnimalUpdateInput!
}

input AnimalCreateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForCreateInput
  scientificName: String
  content: JSON
  status: AnimalStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToOneForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  slug: String
  eventType: Structure
  content: Event_content_Document
  location: JSON
  startDate: DateTime
  endDate: DateTime
  vendors(
    where: OrganizationWhereInput! = {}
    orderBy: [OrganizationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Organization!]
  vendorsCount(where: OrganizationWhereInput! = {}): Int
  featuredImage: Asset
  media: Asset
  author: User
  status: EventStatusType
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum EventStatusType {
  active
  inactive
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  eventType: StructureWhereInput
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  vendors: OrganizationManyRelationFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  status: EventStatusTypeNullableFilter
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input OrganizationManyRelationFilter {
  every: OrganizationWhereInput
  some: OrganizationWhereInput
  none: OrganizationWhereInput
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input EventUpdateInput {
  name: String
  slug: String
  eventType: StructureRelateToOneForUpdateInput
  content: JSON
  location: JSON
  startDate: DateTime
  endDate: DateTime
  vendors: OrganizationRelateToManyForUpdateInput
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  status: EventStatusType
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input OrganizationRelateToManyForUpdateInput {
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  slug: String
  eventType: StructureRelateToOneForCreateInput
  content: JSON
  location: JSON
  startDate: DateTime
  endDate: DateTime
  vendors: OrganizationRelateToManyForCreateInput
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  status: EventStatusType
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input OrganizationRelateToManyForCreateInput {
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

type Page {
  id: ID!
  title: String
  slug: String
  pageType: Structure
  content: Page_content_Document
  status: PageStatusType
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum PageStatusType {
  active
  inactive
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  pageType: StructureWhereInput
  status: PageStatusTypeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input PageStatusTypeNullableFilter {
  equals: PageStatusType
  in: [PageStatusType!]
  notIn: [PageStatusType!]
  not: PageStatusTypeNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  pageType: StructureRelateToOneForUpdateInput
  content: JSON
  status: PageStatusType
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  pageType: StructureRelateToOneForCreateInput
  content: JSON
  status: PageStatusType
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Trait {
  id: ID!
  name: String
  slug: String
  animalType: Structure
  content: Trait_content_Document
  status: TraitStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Trait_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum TraitStatusType {
  active
  inactive
}

input TraitWhereUniqueInput {
  id: ID
}

input TraitWhereInput {
  AND: [TraitWhereInput!]
  OR: [TraitWhereInput!]
  NOT: [TraitWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  animalType: StructureWhereInput
  status: TraitStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input TraitStatusTypeNullableFilter {
  equals: TraitStatusType
  in: [TraitStatusType!]
  notIn: [TraitStatusType!]
  not: TraitStatusTypeNullableFilter
}

input TraitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input TraitUpdateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForUpdateInput
  content: JSON
  status: TraitStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TraitUpdateArgs {
  where: TraitWhereUniqueInput!
  data: TraitUpdateInput!
}

input TraitCreateInput {
  name: String
  slug: String
  animalType: StructureRelateToOneForCreateInput
  content: JSON
  status: TraitStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Group {
  id: ID!
  name: String
  handle: String
  description: Group_description_Document
  members(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  moderators(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  moderatorsCount(where: UserWhereInput! = {}): Int
  status: GroupStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
}

type Group_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum GroupStatusType {
  active
  inactive
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  members: UserManyRelationFilter
  moderators: UserManyRelationFilter
  status: GroupStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input GroupStatusTypeNullableFilter {
  equals: GroupStatusType
  in: [GroupStatusType!]
  notIn: [GroupStatusType!]
  not: GroupStatusTypeNullableFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
}

input GroupUpdateInput {
  name: String
  handle: String
  description: JSON
  members: UserRelateToManyForUpdateInput
  moderators: UserRelateToManyForUpdateInput
  status: GroupStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  handle: String
  description: JSON
  members: UserRelateToManyForCreateInput
  moderators: UserRelateToManyForCreateInput
  status: GroupStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  streamActivityId: String
  group: Group
  status: PostStatusType
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum PostStatusType {
  active
  inactive
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  streamActivityId: StringFilter
  group: GroupWhereInput
  status: PostStatusTypeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  streamActivityId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input PostUpdateInput {
  streamActivityId: String
  group: GroupRelateToOneForUpdateInput
  status: PostStatusType
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  streamActivityId: String
  group: GroupRelateToOneForCreateInput
  status: PostStatusType
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

type Customer {
  id: ID!
  user(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  userCount(where: UserWhereInput! = {}): Int
  customerType: Structure
  stripeCustomerId: String
  subscription: Subscription
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum CustomerStatusType {
  active
  inactive
}

input CustomerWhereUniqueInput {
  id: ID
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  user: UserManyRelationFilter
  customerType: StructureWhereInput
  stripeCustomerId: StringFilter
  subscription: SubscriptionWhereInput
  status: CustomerStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input CustomerStatusTypeNullableFilter {
  equals: CustomerStatusType
  in: [CustomerStatusType!]
  notIn: [CustomerStatusType!]
  not: CustomerStatusTypeNullableFilter
}

input CustomerOrderByInput {
  id: OrderDirection
  stripeCustomerId: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CustomerUpdateInput {
  user: UserRelateToManyForUpdateInput
  customerType: StructureRelateToOneForUpdateInput
  stripeCustomerId: String
  subscription: SubscriptionRelateToOneForUpdateInput
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  user: UserRelateToManyForCreateInput
  customerType: StructureRelateToOneForCreateInput
  stripeCustomerId: String
  subscription: SubscriptionRelateToOneForCreateInput
  status: CustomerStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

type Listing {
  id: ID!
  title: String
  slug: String
  listingType: Structure
  price: String
  description: Listing_description_Document
  store: Store
  stripeProductId: String
  status: ListingStatusType
  featuredImage: Asset
  media: Asset
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Listing_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum ListingStatusType {
  active
  inactive
}

input ListingWhereUniqueInput {
  id: ID
}

input ListingWhereInput {
  AND: [ListingWhereInput!]
  OR: [ListingWhereInput!]
  NOT: [ListingWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  listingType: StructureWhereInput
  price: StringFilter
  store: StoreWhereInput
  stripeProductId: StringFilter
  status: ListingStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input ListingStatusTypeNullableFilter {
  equals: ListingStatusType
  in: [ListingStatusType!]
  notIn: [ListingStatusType!]
  not: ListingStatusTypeNullableFilter
}

input ListingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  price: OrderDirection
  stripeProductId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input ListingUpdateInput {
  title: String
  slug: String
  listingType: StructureRelateToOneForUpdateInput
  price: String
  description: JSON
  store: StoreRelateToOneForUpdateInput
  stripeProductId: String
  status: ListingStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input ListingUpdateArgs {
  where: ListingWhereUniqueInput!
  data: ListingUpdateInput!
}

input ListingCreateInput {
  title: String
  slug: String
  listingType: StructureRelateToOneForCreateInput
  price: String
  description: JSON
  store: StoreRelateToOneForCreateInput
  stripeProductId: String
  status: ListingStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

type Store {
  id: ID!
  name: String
  slug: String
  storeType: Structure
  description: Store_description_Document
  listings: Listing
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: Asset
  media: Asset
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  organization(
    where: OrganizationWhereInput! = {}
    orderBy: [OrganizationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Organization!]
  organizationCount(where: OrganizationWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Store_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum StoreStatusType {
  active
  inactive
}

input StoreWhereUniqueInput {
  id: ID
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  storeType: StructureWhereInput
  listings: ListingWhereInput
  stripeStoreId: StringFilter
  status: StoreStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetWhereInput
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  organization: OrganizationManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input StoreStatusTypeNullableFilter {
  equals: StoreStatusType
  in: [StoreStatusType!]
  notIn: [StoreStatusType!]
  not: StoreStatusTypeNullableFilter
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  stripeStoreId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input StoreUpdateInput {
  name: String
  slug: String
  storeType: StructureRelateToOneForUpdateInput
  description: JSON
  listings: ListingRelateToOneForUpdateInput
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  organization: OrganizationRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToOneForUpdateInput {
  create: ListingCreateInput
  connect: ListingWhereUniqueInput
  disconnect: Boolean
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
  slug: String
  storeType: StructureRelateToOneForCreateInput
  description: JSON
  listings: ListingRelateToOneForCreateInput
  location: JSON
  stripeStoreId: String
  status: StoreStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  organization: OrganizationRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToOneForCreateInput {
  create: ListingCreateInput
  connect: ListingWhereUniqueInput
}

type Category {
  id: ID!
  title: String
  handle: String
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  handle: StringFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CategoryUpdateInput {
  title: String
  handle: String
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  handle: String
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Collection {
  id: ID!
  title: String
  handle: String
  author: User
  status: CollectionStatusType
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum CollectionStatusType {
  active
  inactive
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: CollectionStatusTypeNullableFilter
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input CollectionStatusTypeNullableFilter {
  equals: CollectionStatusType
  in: [CollectionStatusType!]
  notIn: [CollectionStatusType!]
  not: CollectionStatusTypeNullableFilter
}

input CollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input CollectionUpdateInput {
  title: String
  handle: String
  author: UserRelateToOneForUpdateInput
  status: CollectionStatusType
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  title: String
  handle: String
  author: UserRelateToOneForCreateInput
  status: CollectionStatusType
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Structure {
  id: ID!
  name: String
  handle: String
  structure: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureWhereUniqueInput {
  id: ID
}

input StructureWhereInput {
  AND: [StructureWhereInput!]
  OR: [StructureWhereInput!]
  NOT: [StructureWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input StructureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input StructureUpdateInput {
  name: String
  handle: String
  structure: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

input StructureUpdateArgs {
  where: StructureWhereUniqueInput!
  data: StructureUpdateInput!
}

input StructureCreateInput {
  name: String
  handle: String
  structure: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Tag {
  id: ID!
  title: String
  handle: String
  tagType: Structure
  listings(
    where: ListingWhereInput! = {}
    orderBy: [ListingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Listing!]
  listingsCount(where: ListingWhereInput! = {}): Int
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  animals(
    where: AnimalWhereInput! = {}
    orderBy: [AnimalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Animal!]
  animalsCount(where: AnimalWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  traits(
    where: TraitWhereInput! = {}
    orderBy: [TraitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Trait!]
  traitsCount(where: TraitWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  organizations: Organization
  dateCreated: DateTime
  dateUpdated: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
  handle: StringFilter
  tagType: StructureWhereInput
  listings: ListingManyRelationFilter
  stores: StoreManyRelationFilter
  animals: AnimalManyRelationFilter
  articles: ArticleManyRelationFilter
  events: EventManyRelationFilter
  pages: PageManyRelationFilter
  traits: TraitManyRelationFilter
  groups: GroupManyRelationFilter
  organizations: OrganizationWhereInput
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input ListingManyRelationFilter {
  every: ListingWhereInput
  some: ListingWhereInput
  none: ListingWhereInput
}

input StoreManyRelationFilter {
  every: StoreWhereInput
  some: StoreWhereInput
  none: StoreWhereInput
}

input AnimalManyRelationFilter {
  every: AnimalWhereInput
  some: AnimalWhereInput
  none: AnimalWhereInput
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input TraitManyRelationFilter {
  every: TraitWhereInput
  some: TraitWhereInput
  none: TraitWhereInput
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
  handle: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input TagUpdateInput {
  title: String
  handle: String
  tagType: StructureRelateToOneForUpdateInput
  listings: ListingRelateToManyForUpdateInput
  stores: StoreRelateToManyForUpdateInput
  animals: AnimalRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  traits: TraitRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  organizations: OrganizationRelateToOneForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToManyForUpdateInput {
  disconnect: [ListingWhereUniqueInput!]
  set: [ListingWhereUniqueInput!]
  create: [ListingCreateInput!]
  connect: [ListingWhereUniqueInput!]
}

input StoreRelateToManyForUpdateInput {
  disconnect: [StoreWhereUniqueInput!]
  set: [StoreWhereUniqueInput!]
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input AnimalRelateToManyForUpdateInput {
  disconnect: [AnimalWhereUniqueInput!]
  set: [AnimalWhereUniqueInput!]
  create: [AnimalCreateInput!]
  connect: [AnimalWhereUniqueInput!]
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input TraitRelateToManyForUpdateInput {
  disconnect: [TraitWhereUniqueInput!]
  set: [TraitWhereUniqueInput!]
  create: [TraitCreateInput!]
  connect: [TraitWhereUniqueInput!]
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
  handle: String
  tagType: StructureRelateToOneForCreateInput
  listings: ListingRelateToManyForCreateInput
  stores: StoreRelateToManyForCreateInput
  animals: AnimalRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  traits: TraitRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  organizations: OrganizationRelateToOneForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input ListingRelateToManyForCreateInput {
  create: [ListingCreateInput!]
  connect: [ListingWhereUniqueInput!]
}

input StoreRelateToManyForCreateInput {
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input AnimalRelateToManyForCreateInput {
  create: [AnimalCreateInput!]
  connect: [AnimalWhereUniqueInput!]
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input TraitRelateToManyForCreateInput {
  create: [TraitCreateInput!]
  connect: [TraitWhereUniqueInput!]
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

type Asset {
  id: ID!
  file: FileFieldOutput
  folder: AssetFolderType
  altTitle: String
  caption: String
  status: AssetStatusType
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

enum AssetFolderType {
  active
  inactive
}

enum AssetStatusType {
  active
  inactive
}

input AssetWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  folder: AssetFolderTypeNullableFilter
  altTitle: StringFilter
  caption: StringFilter
  status: AssetStatusTypeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input AssetFolderTypeNullableFilter {
  equals: AssetFolderType
  in: [AssetFolderType!]
  notIn: [AssetFolderType!]
  not: AssetFolderTypeNullableFilter
}

input AssetStatusTypeNullableFilter {
  equals: AssetStatusType
  in: [AssetStatusType!]
  notIn: [AssetStatusType!]
  not: AssetStatusTypeNullableFilter
}

input AssetOrderByInput {
  id: OrderDirection
  folder: OrderDirection
  altTitle: OrderDirection
  caption: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input AssetUpdateInput {
  file: FileFieldInput
  folder: AssetFolderType
  altTitle: String
  caption: String
  status: AssetStatusType
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  file: FileFieldInput
  folder: AssetFolderType
  altTitle: String
  caption: String
  status: AssetStatusType
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  firstName: String
  lastName: String
  password: PasswordState
  about: User_about_Document
  avatar: Asset
  role: Role
  following(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  followingCount(where: UserWhereInput! = {}): Int
  followers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  followersCount(where: UserWhereInput! = {}): Int
  listings(
    where: ListingWhereInput! = {}
    orderBy: [ListingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Listing!]
  listingsCount(where: ListingWhereInput! = {}): Int
  animals(
    where: AnimalWhereInput! = {}
    orderBy: [AnimalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Animal!]
  animalsCount(where: AnimalWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  customer: Customer
  store(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  storeCount(where: StoreWhereInput! = {}): Int
  groupMember(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  groupMemberCount(where: GroupWhereInput! = {}): Int
  moderator(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  moderatorCount(where: GroupWhereInput! = {}): Int
  groupAuthor(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  groupAuthorCount(where: GroupWhereInput! = {}): Int
  organizationMembers: Organization
  organization: Organization
  assets: Asset
  traits(
    where: TraitWhereInput! = {}
    orderBy: [TraitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Trait!]
  traitsCount(where: TraitWhereInput! = {}): Int
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

type User_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum UserStatusType {
  active
  inactive
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  password: PasswordFilter
  avatar: AssetWhereInput
  role: RoleWhereInput
  following: UserManyRelationFilter
  followers: UserManyRelationFilter
  listings: ListingManyRelationFilter
  animals: AnimalManyRelationFilter
  articles: ArticleManyRelationFilter
  events: EventManyRelationFilter
  pages: PageManyRelationFilter
  customer: CustomerWhereInput
  store: StoreManyRelationFilter
  groupMember: GroupManyRelationFilter
  moderator: GroupManyRelationFilter
  groupAuthor: GroupManyRelationFilter
  organizationMembers: OrganizationWhereInput
  organization: OrganizationWhereInput
  assets: AssetWhereInput
  traits: TraitManyRelationFilter
  status: UserStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  firstName: String
  lastName: String
  password: String
  about: JSON
  avatar: AssetRelateToOneForUpdateInput
  role: RoleRelateToOneForUpdateInput
  following: UserRelateToManyForUpdateInput
  followers: UserRelateToManyForUpdateInput
  listings: ListingRelateToManyForUpdateInput
  animals: AnimalRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
  events: EventRelateToManyForUpdateInput
  pages: PageRelateToManyForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  store: StoreRelateToManyForUpdateInput
  groupMember: GroupRelateToManyForUpdateInput
  moderator: GroupRelateToManyForUpdateInput
  groupAuthor: GroupRelateToManyForUpdateInput
  organizationMembers: OrganizationRelateToOneForUpdateInput
  organization: OrganizationRelateToOneForUpdateInput
  assets: AssetRelateToOneForUpdateInput
  traits: TraitRelateToManyForUpdateInput
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  firstName: String
  lastName: String
  password: String
  about: JSON
  avatar: AssetRelateToOneForCreateInput
  role: RoleRelateToOneForCreateInput
  following: UserRelateToManyForCreateInput
  followers: UserRelateToManyForCreateInput
  listings: ListingRelateToManyForCreateInput
  animals: AnimalRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
  events: EventRelateToManyForCreateInput
  pages: PageRelateToManyForCreateInput
  customer: CustomerRelateToOneForCreateInput
  store: StoreRelateToManyForCreateInput
  groupMember: GroupRelateToManyForCreateInput
  moderator: GroupRelateToManyForCreateInput
  groupAuthor: GroupRelateToManyForCreateInput
  organizationMembers: OrganizationRelateToOneForCreateInput
  organization: OrganizationRelateToOneForCreateInput
  assets: AssetRelateToOneForCreateInput
  traits: TraitRelateToManyForCreateInput
  status: UserStatusType
  metadata: JSON
  dateCreated: DateTime
  dateUpdated: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  handle: String
  description: String
  permissions: Boolean
  dateCreated: DateTime
  dateUpdated: DateTime
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canReadListing: Boolean
  canManageListing: Boolean
  canManageAnimal: Boolean
  canManageArticle: Boolean
  canManageEvent: Boolean
  canManagePage: Boolean
  canManageTrait: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  description: StringFilter
  permissions: BooleanFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canReadListing: BooleanFilter
  canManageListing: BooleanFilter
  canManageAnimal: BooleanFilter
  canManageArticle: BooleanFilter
  canManageEvent: BooleanFilter
  canManagePage: BooleanFilter
  canManageTrait: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  description: OrderDirection
  permissions: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canReadListing: OrderDirection
  canManageListing: OrderDirection
  canManageAnimal: OrderDirection
  canManageArticle: OrderDirection
  canManageEvent: OrderDirection
  canManagePage: OrderDirection
  canManageTrait: OrderDirection
}

input RoleUpdateInput {
  name: String
  handle: String
  description: String
  permissions: Boolean
  dateCreated: DateTime
  dateUpdated: DateTime
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canReadListing: Boolean
  canManageListing: Boolean
  canManageAnimal: Boolean
  canManageArticle: Boolean
  canManageEvent: Boolean
  canManagePage: Boolean
  canManageTrait: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  handle: String
  description: String
  permissions: Boolean
  dateCreated: DateTime
  dateUpdated: DateTime
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canReadListing: Boolean
  canManageListing: Boolean
  canManageAnimal: Boolean
  canManageArticle: Boolean
  canManageEvent: Boolean
  canManagePage: Boolean
  canManageTrait: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

type Organization {
  id: ID!
  name: String
  slug: String
  organizationType: Structure
  description: Organization_description_Document
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  members(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  status: OrganizationStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  seoTitle: String
  seoDescription: String
  seoImage: Asset
  vendors(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  vendorsCount(where: EventWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Organization_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum OrganizationStatusType {
  active
  inactive
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  organizationType: StructureWhereInput
  stores: StoreManyRelationFilter
  members: UserManyRelationFilter
  status: OrganizationStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetWhereInput
  vendors: EventManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input OrganizationStatusTypeNullableFilter {
  equals: OrganizationStatusType
  in: [OrganizationStatusType!]
  notIn: [OrganizationStatusType!]
  not: OrganizationStatusTypeNullableFilter
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  slug: String
  organizationType: StructureRelateToOneForUpdateInput
  description: JSON
  stores: StoreRelateToManyForUpdateInput
  members: UserRelateToManyForUpdateInput
  status: OrganizationStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForUpdateInput
  vendors: EventRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  slug: String
  organizationType: StructureRelateToOneForCreateInput
  description: JSON
  stores: StoreRelateToManyForCreateInput
  members: UserRelateToManyForCreateInput
  status: OrganizationStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToOneForCreateInput
  vendors: EventRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Global {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum GlobalStatusType {
  active
  inactive
}

input GlobalWhereUniqueInput {
  id: ID
}

input GlobalWhereInput {
  AND: [GlobalWhereInput!]
  OR: [GlobalWhereInput!]
  NOT: [GlobalWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: GlobalStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input GlobalStatusTypeNullableFilter {
  equals: GlobalStatusType
  in: [GlobalStatusType!]
  notIn: [GlobalStatusType!]
  not: GlobalStatusTypeNullableFilter
}

input GlobalOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input GlobalUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input GlobalUpdateArgs {
  where: GlobalWhereUniqueInput!
  data: GlobalUpdateInput!
}

input GlobalCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  status: GlobalStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Subscription {
  id: ID!
  name: String
  handle: String
  subscriptionType: Structure
  description: Subscription_description_Document
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: Asset
  media(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  mediaCount(where: AssetWhereInput! = {}): Int
  author: User
  seoTitle: String
  seoDescription: String
  seoImage(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  seoImageCount(where: AssetWhereInput! = {}): Int
  customer(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customerCount(where: CustomerWhereInput! = {}): Int
  dateCreated: DateTime
  dateUpdated: DateTime
}

type Subscription_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

enum SubscriptionStatusType {
  active
  inactive
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  subscriptionType: StructureWhereInput
  stripeSubscriptionId: StringFilter
  status: SubscriptionStatusTypeNullableFilter
  featuredImage: AssetWhereInput
  media: AssetManyRelationFilter
  author: UserWhereInput
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoImage: AssetManyRelationFilter
  customer: CustomerManyRelationFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input SubscriptionStatusTypeNullableFilter {
  equals: SubscriptionStatusType
  in: [SubscriptionStatusType!]
  notIn: [SubscriptionStatusType!]
  not: SubscriptionStatusTypeNullableFilter
}

input CustomerManyRelationFilter {
  every: CustomerWhereInput
  some: CustomerWhereInput
  none: CustomerWhereInput
}

input SubscriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  stripeSubscriptionId: OrderDirection
  status: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input SubscriptionUpdateInput {
  name: String
  handle: String
  subscriptionType: StructureRelateToOneForUpdateInput
  description: JSON
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: AssetRelateToOneForUpdateInput
  media: AssetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToManyForUpdateInput
  customer: CustomerRelateToManyForUpdateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CustomerRelateToManyForUpdateInput {
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  name: String
  handle: String
  subscriptionType: StructureRelateToOneForCreateInput
  description: JSON
  stripeSubscriptionId: String
  status: SubscriptionStatusType
  featuredImage: AssetRelateToOneForCreateInput
  media: AssetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  seoTitle: String
  seoDescription: String
  seoImage: AssetRelateToManyForCreateInput
  customer: CustomerRelateToManyForCreateInput
  dateCreated: DateTime
  dateUpdated: DateTime
}

input CustomerRelateToManyForCreateInput {
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

type Setting {
  id: ID!
  name: String
  handle: String
  data: JSON
  author: User
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

enum SettingStatusType {
  active
  inactive
}

input SettingWhereUniqueInput {
  id: ID
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  name: StringFilter
  handle: StringFilter
  author: UserWhereInput
  status: SettingStatusTypeNullableFilter
  dateCreated: DateTimeNullableFilter
  dateUpdated: DateTimeNullableFilter
}

input SettingStatusTypeNullableFilter {
  equals: SettingStatusType
  in: [SettingStatusType!]
  notIn: [SettingStatusType!]
  not: SettingStatusTypeNullableFilter
}

input SettingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  handle: OrderDirection
  status: OrderDirection
  dateCreated: OrderDirection
  dateUpdated: OrderDirection
}

input SettingUpdateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForUpdateInput
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  name: String
  handle: String
  data: JSON
  author: UserRelateToOneForCreateInput
  status: SettingStatusType
  dateCreated: DateTime
  dateUpdated: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createAnimal(data: AnimalCreateInput!): Animal
  createAnimals(data: [AnimalCreateInput!]!): [Animal]
  updateAnimal(where: AnimalWhereUniqueInput!, data: AnimalUpdateInput!): Animal
  updateAnimals(data: [AnimalUpdateArgs!]!): [Animal]
  deleteAnimal(where: AnimalWhereUniqueInput!): Animal
  deleteAnimals(where: [AnimalWhereUniqueInput!]!): [Animal]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createTrait(data: TraitCreateInput!): Trait
  createTraits(data: [TraitCreateInput!]!): [Trait]
  updateTrait(where: TraitWhereUniqueInput!, data: TraitUpdateInput!): Trait
  updateTraits(data: [TraitUpdateArgs!]!): [Trait]
  deleteTrait(where: TraitWhereUniqueInput!): Trait
  deleteTraits(where: [TraitWhereUniqueInput!]!): [Trait]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(
    where: CustomerWhereUniqueInput!
    data: CustomerUpdateInput!
  ): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  createListing(data: ListingCreateInput!): Listing
  createListings(data: [ListingCreateInput!]!): [Listing]
  updateListing(
    where: ListingWhereUniqueInput!
    data: ListingUpdateInput!
  ): Listing
  updateListings(data: [ListingUpdateArgs!]!): [Listing]
  deleteListing(where: ListingWhereUniqueInput!): Listing
  deleteListings(where: [ListingWhereUniqueInput!]!): [Listing]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(
    where: CollectionWhereUniqueInput!
    data: CollectionUpdateInput!
  ): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createStructure(data: StructureCreateInput!): Structure
  createStructures(data: [StructureCreateInput!]!): [Structure]
  updateStructure(
    where: StructureWhereUniqueInput!
    data: StructureUpdateInput!
  ): Structure
  updateStructures(data: [StructureUpdateArgs!]!): [Structure]
  deleteStructure(where: StructureWhereUniqueInput!): Structure
  deleteStructures(where: [StructureWhereUniqueInput!]!): [Structure]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(
    where: OrganizationWhereUniqueInput!
    data: OrganizationUpdateInput!
  ): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createGlobal(data: GlobalCreateInput!): Global
  createGlobals(data: [GlobalCreateInput!]!): [Global]
  updateGlobal(where: GlobalWhereUniqueInput!, data: GlobalUpdateInput!): Global
  updateGlobals(data: [GlobalUpdateArgs!]!): [Global]
  deleteGlobal(where: GlobalWhereUniqueInput!): Global
  deleteGlobals(where: [GlobalWhereUniqueInput!]!): [Global]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(
    where: SubscriptionWhereUniqueInput!
    data: SubscriptionUpdateInput!
  ): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(
    where: SettingWhereUniqueInput!
    data: SettingUpdateInput!
  ): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  animals(
    where: AnimalWhereInput! = {}
    orderBy: [AnimalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Animal!]
  animal(where: AnimalWhereUniqueInput!): Animal
  animalsCount(where: AnimalWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  traits(
    where: TraitWhereInput! = {}
    orderBy: [TraitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Trait!]
  trait(where: TraitWhereUniqueInput!): Trait
  traitsCount(where: TraitWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  customers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  listings(
    where: ListingWhereInput! = {}
    orderBy: [ListingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Listing!]
  listing(where: ListingWhereUniqueInput!): Listing
  listingsCount(where: ListingWhereInput! = {}): Int
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  store(where: StoreWhereUniqueInput!): Store
  storesCount(where: StoreWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  structures(
    where: StructureWhereInput! = {}
    orderBy: [StructureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Structure!]
  structure(where: StructureWhereUniqueInput!): Structure
  structuresCount(where: StructureWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  assets(
    where: AssetWhereInput! = {}
    orderBy: [AssetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Asset!]
  asset(where: AssetWhereUniqueInput!): Asset
  assetsCount(where: AssetWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  organizations(
    where: OrganizationWhereInput! = {}
    orderBy: [OrganizationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  globals(
    where: GlobalWhereInput! = {}
    orderBy: [GlobalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Global!]
  global(where: GlobalWhereUniqueInput!): Global
  globalsCount(where: GlobalWhereInput! = {}): Int
  subscriptions(
    where: SubscriptionWhereInput! = {}
    orderBy: [SubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  settings(
    where: SettingWhereInput! = {}
    orderBy: [SettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
